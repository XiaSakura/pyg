package com.pinyougou.shop.controller;

import java.util.List;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.alibaba.dubbo.config.annotation.Reference;
import com.pinyougou.pojo.TbSeller;
import com.pinyougou.sellergoods.service.SellerService;

import entity.PageResult;
import entity.Result;

/**
 * controller
 * 
 * @author Administrator
 *
 */
@RestController
@RequestMapping("/seller")
public class SellerController {

	@Reference
	private SellerService sellerService;

	/**
	 * 返回全部列表
	 * 
	 * @return
	 */
	@RequestMapping("/findAll")
	public List<TbSeller> findAll() {
		return sellerService.findAll();
	}

	/**
	 * 返回全部列表
	 * 
	 * @return
	 */
	@RequestMapping("/findPage")
	public PageResult findPage(int page, int rows) {
		return sellerService.findPage(page, rows);
	}

	/**
	 * 增加
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping("/add")
	public Result add(@RequestBody TbSeller seller) {
		// 密码加密 只能在这里加密 因为在service层里面 没有引入安全框架
		try {
			BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
			String password = passwordEncoder.encode(seller.getPassword());
			seller.setPassword(password);
			sellerService.add(seller);
			return new Result(true, "增加成功");
		} catch (Exception e) {
			e.printStackTrace();
			return new Result(false, "增加失败");
		}
	}

	/**
	 * 修改
	 * 
	 * @param seller
	 * @return
	 */
	@RequestMapping("/update")
	public Result update(@RequestBody TbSeller seller) {
		try {
			sellerService.update(seller);
			return new Result(true, "修改成功");
		} catch (Exception e) {
			e.printStackTrace();
			return new Result(false, "修改失败");
		}
	}

	/**
	 * 获取实体
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/findOne")
	public TbSeller findOne(String id) {
		return sellerService.findOne(id);
	}

	/**
	 * 批量删除
	 * 
	 * @param ids
	 * @return
	 */
	@RequestMapping("/delete")
	public Result delete(String[] ids) {
		try {
			sellerService.delete(ids);
			return new Result(true, "删除成功");
		} catch (Exception e) {
			e.printStackTrace();
			return new Result(false, "删除失败");
		}
	}

	/**
	 * 查询+分页
	 * 
	 * @param brand
	 * @param page
	 * @param rows
	 * @return
	 */
	@RequestMapping("/search")
	public PageResult search(@RequestBody TbSeller seller, int page, int rows) {
		return sellerService.findPage(seller, page, rows);
	}

	/**
	 * 查询出登录商家的信息 注意这里查询出来的登录name就是 seller表的id 相当于账号
	 * 
	 * @return
	 */
	@RequestMapping("/getSellerInfo")
	public TbSeller getSellerInfo() {
		String sellerId = SecurityContextHolder.getContext().getAuthentication().getName();
		TbSeller seller = sellerService.findOne(sellerId);
		seller.setPassword("");
		return seller;
	}

	/**修改密码
	 * @param password
	 * @param newPassword
	 * @return
	 */
	@RequestMapping("/updatePassword")
	public Result updatePassword(@RequestParam(name="password") String password,@RequestParam(name="newPassword") String newPassword) {
		//先得到商家 注意这里是已经登录了的
		String sellerId = SecurityContextHolder.getContext().getAuthentication().getName();
		TbSeller seller = sellerService.findOne(sellerId);
		//对密码进行加密
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		password = passwordEncoder.encode(password);
		passwordEncoder.matches(password, encodedPassword)
		//两者不同时 错误
		System.out.println(seller.getPassword());
		System.out.println(password);
		if (!seller.getPassword().equals(password)) {
			return new Result(false, "你输入的密码错误,请重新输入");
		}else {
			//对密码进行修改
			seller.setPassword(newPassword);
			sellerService.update(seller);
			return new Result(true, "修改密码成功");
		}
		
	}

}
